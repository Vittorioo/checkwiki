#!/usr/bin/perl

###########################################################################
##
##          FILE: dispatcher.pl
##
##         USAGE: ./checkwiki.pl -c checkwiki.cfg --project=<enwiki>
##
##   DESCRIPTION: Submits checkwiki.pl dump jobs to the queue
##
##        AUTHOR: Stefan KÃ¼hn, Bryan White
##       LICENCE: GPLv3
##       VERSION: 08/01/2013
##
###########################################################################

use strict;
use warnings;

use DBI;
use Getopt::Long
  qw(GetOptionsFromString :config bundling no_auto_abbrev no_ignore_case);

our $dbh;
our $sth;

my ( $DbName, $DbServer, $DbUsername, $DbPassword );
my $ProjectName = q{};

my @Options = (
    'database=s' => \$DbName,
    'host=s'     => \$DbServer,
    'password=s' => \$DbPassword,
    'user=s'     => \$DbUsername,
    'project=s'  => \$ProjectName,
);

GetOptions(
    'c=s' => sub {
        my $f = IO::File->new( $_[1], '<:encoding(UTF-8)' )
          or die( "Can't open " . $_[1] . "\n" );
        local ($/);
        my $s = <$f>;
        $f->close();
        my ( $Success, $RemainingArgs ) = GetOptionsFromString( $s, @Options );
        die unless ( $Success && !@$RemainingArgs );
    },
    @Options
);

###########################################################################
##  MAIN PROGRAM
###########################################################################

open_db();

if ( $ProjectName ne 'all' ) {
    $sth = $dbh->prepare(
        'SELECT Project, Last_Dump FROM cw_project WHERE Project = ?;')
      || die "Problem with statement: $DBI::errstr\n";
    $sth->execute($ProjectName) or die "Cannot execute: " . $sth->errstr . "\n";
}
else {
    $sth = $dbh->prepare('SELECT Project, Last_Dump FROM cw_project;')
      || die "Problem with statement: $DBI::errstr\n";
    $sth->execute or die "Cannot execute: " . $sth->errstr . "\n";
}

my ( $project_sql, $last_dump_sql );
$sth->bind_col( 1, \$project_sql );
$sth->bind_col( 2, \$last_dump_sql );

while ( $sth->fetchrow_arrayref ) {
    my ( $LatestDumpDate, $LatestDumpFilename ) = FindLatestDump($ProjectName);

    if ( !defined($last_dump_sql) || $last_dump_sql ne $LatestDumpDate ) {
        system(
            'jsub',
            '-j',
            'y',
            '-mem',
            '512m',
            '-N',
            'dumpmuncher-' . $project_sql,
            '-o',
            '/data/project/checkwiki/var/log',
            '-once',
            'checkwiki.pl',
            '-c',
            '/data/project/checkwiki/checkwiki.cfg',
            '-p',
            $project_sql,
            '--dumpfile',
            $LatestDumpFilename,
            '--tt-file',
            '/data/project/checkwiki/var/spool/templatetiger/'
              . $ProjectName . '-'
              . $LatestDumpDate . '.txt'
        );
    }
}

close_db();

###########################################################################
##  OPEN DATABASE
###########################################################################

sub open_db {

    $dbh = DBI->connect(
        'DBI:mysql:'
          . $DbName
          . ( defined($DbServer) ? ':host=' . $DbServer : q{} ),
        $DbUsername,
        $DbPassword,
        {
            RaiseError        => 1,
            AutoCommit        => 1,
            mysql_enable_utf8 => 1,
        }
    ) or die( "Could not connect to database: " . DBI::errstr() . "\n" );

    return ();
}

###########################################################################
## CLOSE DATABASE
###########################################################################

sub close_db {
    $dbh->disconnect();

    return ();
}

###########################################################################
## FIND LATEST DUMP FOR A PROJECT
###########################################################################

sub FindLatestDump {
    my ($project) = @_;

    my @filenames =
      </public/datasets/public/$project/*/$project-*-pages-articles.xml.bz2>;
    if ( !@filenames ) {
        return undef;
    }

    if ( $filenames[-1] !~
m!/public/datasets/public/\Q$project\E/((\d{4})(\d{2})(\d{2}))*/\Q$project\E-\1-pages-articles.xml.bz2!
      )
    {
        die( "Couldn't parse filename '" . $filenames[-1] . "'\n" );
    }
    else {
        return ( $2 . q{-} . $3 . q{-} . $4, $filenames[-1] );
    }
}
